import { VerticalBox, Palette, Button } from "std-widgets.slint";


export component App inherits Window {
    in property <image> video-frame <=> image.source;
    in property <bool> playing: true;

    in property <int> video-width: 1;
    in property <int> video-height: 1;

    in property <float> position;

    pure callback key-pressed(KeyEvent);

    pure callback toggle-state();
    pure callback replay();
    pure callback mouse-drag();
    pure callback seek(int, int);

    property <float> ratio: video-width > video-height ? video-height / video-width : video-width / video-height;

    in property <float> zoom: 0.2;

    title: "mini-player";
    icon: @image-url("play-solid.svg");

    always-on-top: true;
    no-frame: true;

    width: video-width > video-height ? zoom * (video-width / (video-width / 1920)) * 1px : zoom * (video-height / (video-height / 1080)) * ratio * 1px;
    height: video-width > video-height ? zoom * (video-width / (video-width / 1920)) * ratio * 1px : zoom * (video-height / (video-height / 1080)) * 1px;
    background: #00000000;

    forward-focus: keyboard-focus;

    keyboard-focus := FocusScope {
        key-pressed(event) => {
            root.key-pressed(event);
            return EventResult.accept;
        }
    }

    states [
        shown when controls.has-hover || animation-tick() < 1000ms: {
            controls.opacity: 1;
            in {
                animate controls.opacity { duration: 0ms; }
            }
        }
        hidden when !controls.has-hover: {
            controls.opacity: 0;
            in {
                animate controls.opacity {
                    delay: 1000ms;
                    duration: 100ms;
                }
            }
        }
    ]

    VerticalBox {
        padding: 0;
        image := Image {
            TouchArea {
                moved => {
                    root.mouse-drag();
                }
            }
        }
    }

    controls := TouchArea {
        height: 20px;
        y: root.height - self.height;

        HorizontalLayout {
            spacing: 2px;
            play_button := TouchArea {
                width: 20px;
                clicked => {
                    root.toggle-state();
                }

                Rectangle {
                    width: 100%;
                    height: 100%;
                    border-radius: 5px;
                    background: #ffffff80;
                }

                Image {
                    width: 50%;
                    height: 50%;
                    source: root.playing ? @image-url("pause-solid.svg") : @image-url("play-solid.svg");
                }
            }

            seeker := TouchArea {
                Rectangle {
                    background: #00000080;
                    border-radius: 5px;

                    Rectangle {
                        height: 100%;
                        width: 5px;
                        background: #ffffff80;
                        border-radius: 2px;

                        x: position * parent.width - (self.width / 2);
                    }
                }

                moved => {
                    root.seek(self.mouse-x / 1px, self.width / 1px);
                }

                clicked => {
                    root.seek(self.mouse-x / 1px, self.width / 1px);
                }
            }

            replay-button := TouchArea {
                width: 20px;
                clicked => {
                    root.replay();
                }

                Rectangle {
                    width: 100%;
                    height: 100%;
                    border-radius: 5px;
                    background: #ffffff80;
                }

                Image {
                    width: 50%;
                    height: 50%;
                    source: @image-url("arrow-rotate-left-solid.svg");
                }
            }
        }
    }
}
